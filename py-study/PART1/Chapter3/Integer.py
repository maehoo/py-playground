# 정수



# 정수에서 숫자 앞에 기호가 없으면 양수를 의미한다. 즉 + 기호를 분여도 똑같은 양수다.
# 음수를 표현하려면 숫자 앞에 -기호를 붙인다.
print(+1365)
#>>>1365
print(-1365)



#정수 표현방법
#정수에 쉼표(,)를 사용할 수 없다.
print(1,000,000)
#백만이라는 숫자 대신에 튜플을 얻는다(1,0,0). 그래서 대신에 언더바(_)를 사용하여 숫자를 구분할 수 있다.
print(1_000_000)



#연산자
"""
+,-,* c언어와 동일
/ (부동소수점 나누기)            7/2  -> 3.5
// (정수 나누기 소수점 이하 버림)  7//2 -> 3
%  (나머지)                   7%3  -> 1
** (지수)                    3**4  -> 81
"""



#연산 순서
print(-5**2)
#이 경우 결과는 -25가 나오게 된다. 우선순위를 전부 다 외우면 되긴 하지만 더 쉬운 방법은 계산식에 괄호를 붙이면 쉽게 해결 할 수 있다.
print((-5)**2)



#진수
#2진수 ->10진수
print(0b10)
#8진수 ->10진수
print(0o10)
#16진수 ->10진수
print(0x10)

#역방향
value = 65
print(bin(value)) # >>> 0b1000001
print(oct(value)) # >>> 0o101
print(hex(value)) # >>> 0x41

#정수 -> 문자
print(chr(65))
#문자 -> 정수
print(ord('A'))



#int
#int함수는 하나의 입력 인수를 취해서 입력 인수와 동일한 정수를 반환한다. 소수점이 있다면 소수점 이하 숫자는 버리고 정수만 반환한다.
#문자열 -> 정수 가 가능하다.
print(int('99'))
print(int('+12'))
print(int('1_000_000'))
print(int(98.6)) #이것은 가능하지만 print(int('98.6))은 불가능하다. 문자열에 소수점이나 지수를 포함한 문자열은 처리하지 않는다.
print(int(A))
#추가로 지수를 취해서 10진수가 아닌 수를 10진수로 표현이 가능하다.
print(int('10',2))
print(int('10', 8))
print(int('10', 16))
print(int('10', 33))
# 추가
print(int(True+2))
print(int(False + 5)) #True 는 1로 False는 0으로 계산된다.
